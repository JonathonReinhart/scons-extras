from pprint import pprint

env = Environment(
    CPPFLAGS = ['-Wall', '-Werror'],
    NAME = '$ARCHNAME-$OS-$MODE',
    
    BUILD_ROOT = '#build',
    BUILD_DIR = '$BUILD_ROOT/$ARCH/$SUBARCH/$OS/$MODE',
)
env.Tool('variantgen', toolpath = ['../../scons_tools'])
cg = env.VariantGen()

# Mode
vs_mode = cg.AddVariantSet('mode')

v_release = vs_mode.AddVariant(MODE='release')
v_release.AppendUnique(
    CPPDEFINES = ['NDEBUG'],
    CPPFLAGS = ['-O3'],
)

v_debug = vs_mode.AddVariant(MODE='debug')
v_debug.AppendUnique(
    CPPDEFINES = ['DEBUG'],
)


# Architecture
vs_arch = cg.AddVariantSet('arch')

vs_arch.AddVariant(ARCHNAME='x86_32', ARCH='x86', SUBARCH='32').Append(CCFLAGS=['-m32'], LINKFLAGS=['-m32'])
vs_arch.AddVariant(ARCHNAME='x86_64', ARCH='x86', SUBARCH='64').Append(CCFLAGS=['-m64'], LINKFLAGS=['-m64'])
vs_arch.AddVariant(ARCHNAME='arm', ARCH='arm')


# OS
vs_os = cg.AddVariantSet('os')

v_win = vs_os.AddVariant()
v_win.Replace(OS='windows')
v_win.Tool('null', toolpath=['scons_tools'])

v_lin = vs_os.AddVariant()
v_lin.Replace(OS='linux')



cg.Dump()

for env in cg.GenerateEnvironments():
    print 'Environment:', env.subst('$NAME')

    env.SConscript(
        dirs = '.',
        variant_dir = '$BUILD_DIR',
        duplicate = False,
        exports = dict(env=env.Clone()),
    )
